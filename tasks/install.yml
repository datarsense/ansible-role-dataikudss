---
- name: Download DSS
  become: true
  become_user: "{{ dss_service_user }}"
  ansible.builtin.get_url:
    url: "{{ dss_base_repository_url }}/{{ dss_version }}/dataiku-dss-{{ dss_version }}.tar.gz"
    dest: "{{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}.tar.gz"
    mode: '644'
  tags: [setup, dss-setup]

- name: Unarchive DSS
  become: true
  become_user: "{{ dss_service_user }}"
  ansible.builtin.unarchive:
    src: "{{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}.tar.gz"
    dest: "{{ dss_install_dir_location }}"
    creates: "{{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}"
    remote_src: yes
  tags: [setup, dss-setup]

- name: Install DSS dependencies
  become: true
  ansible.builtin.shell:
    cmd: |
      {{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}/scripts/install/install-deps.sh -yes 2>&1 > /tmp/dss-install-deps.log
      touch {{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}/scripts/install/DEPS-INSTALLED
    creates: "{{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}/scripts/install/DEPS-INSTALLED"
  tags: [setup, dss-setup]

- name: Install Dataiku python API
  become: true
  ansible.builtin.pip:
    name: "{{ dataiku_python_api_package }}"
    state: latest
    executable: pip3
    #state: forcereinstall # Useful when release/5.1 gets updated
  tags: [setup, dss-setup, dss-api]

- name: Run the Dataiku DSS installer to install DSS for the first time
  become: true
  become_user: "{{ dss_service_user }}"
  ansible.builtin.command: "{{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}/installer.sh -d {{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ dss_datadir }} -p {{ dss_network_port }} -t {{ dss_node_type }}"
  args:
    creates: "{{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ dss_datadir }}/dss-version.json"
  register: dss_install
  changed_when: "'Installation complete' in dss_install.stdout"
  tags: [dss]

- name: Read dss-version.json file
  become: true
  become_user: "{{ dss_service_user }}"
  ansible.builtin.command: cat {{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ dss_datadir }}/dss-version.json
  register: dss_version_jsonfile
  changed_when: false
  tags: [dss]

- name: Set current dss version fact
  ansible.builtin.set_fact:
    current_dss_version: "{{ dss_version_jsonfile.stdout | from_json | json_query('product_version') }}"
  changed_when: false
  tags: [dss]

- name: Compare currently installed DSS version with target DSS version and upgrade DSS if needed
  when: current_dss_version is version(dss_version,  operator='lt', strict=True)
  tags: [dss]
  block:
    - name: "Upgrade message" 
      ansible.builtin.debug:
        msg: "DSS UPGRADE REQUIRED"
    
    - name: Stop the studios
      become: true
      ansible.builtin.service:
        name: "dataiku.{{ dss_datadir }}"
        state: stopped

    - name: Run the Dataiku DSS installer to upgrade the DSS instance
      when: current_dss_version is version(dss_version,  operator='lt', strict=True)
      become: true
      become_user: "{{ dss_service_user }}"
      ansible.builtin.command: "{{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}/installer.sh -u -y -d {{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ dss_datadir }}"
      register: dss_upgrade
      changed_when: "'Installation complete' in dss_upgrade.stdout"

- name: Download Hadoop package
  when: configure_spark and ((dss_install is defined and dss_install.changed) or (dss_upgrade is defined and dss_upgrade.changed))
  become: true
  become_user: "{{ dss_service_user }}"
  ansible.builtin.get_url:
    url: "{{ dss_base_repository_url }}/{{ dss_version }}/{{ dss_hadoop_package }}"
    dest: "{{ dss_install_dir_location }}/{{ dss_hadoop_package }}"
    mode: '644'
  tags: [dss]

- name: Install or upgrade standalone Hadoop support
  when: configure_spark and ((dss_install is defined and dss_install.changed) or (dss_upgrade is defined and dss_upgrade.changed))
  become: true
  become_user: "{{ dss_service_user }}"
  ansible.builtin.command: "{{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ dss_datadir }}/bin/dssadmin install-hadoop-integration -standaloneArchive {{ dss_install_dir_location }}/{{ dss_hadoop_package }}"
  register: hadoop_install
  changed_when: hadoop_install.rc == 0
  tags: [dss]

- name: Download Spark package
  when: configure_spark and ((dss_install is defined and dss_install.changed) or (dss_upgrade is defined and dss_upgrade.changed))
  become: true
  become_user: "{{ dss_service_user }}"
  ansible.builtin.get_url:
    url: "{{ dss_base_repository_url }}/{{ dss_version }}/{{ dss_spark_package }}"
    dest: "{{ dss_install_dir_location }}/{{ dss_spark_package }}"
    mode: '644'
  tags: [dss]

- name: Install or upgrade standalone Spark support
  when: configure_spark and ((dss_install is defined and dss_install.changed) or (dss_upgrade is defined and dss_upgrade.changed))
  become: true
  become_user: "{{ dss_service_user }}"
  ansible.builtin.command: "{{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ dss_datadir }}/bin/dssadmin install-spark-integration -standaloneArchive {{ dss_install_dir_location }}/{{ dss_spark_package }}{{ ' -forK8S' if configure_k8s }}"
  register: spark_install
  changed_when: spark_install.rc == 0
  tags: [dss]

- name: Activate UIF
  when: configure_uif and ((dss_install is defined and dss_install.changed) or (dss_upgrade is defined and dss_upgrade.changed))
  become: true
  ansible.builtin.command: "{{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ dss_datadir }}/bin/dssadmin install-impersonation {{ dss_service_user }}"
  register: activate_uif_output
  changed_when: "'Impersonation initial setup complete' in activate_uif_output.stdout"
  tags: [dss]

- name: Read dss install id
  when: configure_uif and ((dss_install is defined and dss_install.changed) or (dss_upgrade is defined and dss_upgrade.changed))
  become: true
  become_user: "{{ dss_service_user }}"
  ansible.builtin.command: /bin/sh -c "grep installid {{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ dss_datadir }}/install.ini | cut -d ' ' -f3" 
  register: dss_install_id
  changed_when: false
  tags: [dss]

- name: Deploy UIF configuration file
  when: configure_uif and ((dss_install is defined and dss_install.changed) or (dss_upgrade is defined and dss_upgrade.changed))
  become: true
  ansible.builtin.template: 
    src: "security-config.ini.j2"
    dest: "/etc/dataiku-security/{{ dss_install_id.stdout }}/security-config.ini"
    mode: 0600
  tags: [dss]

- name: Copy license file
  become: true
  become_user: "{{ dss_service_user }}"
  ansible.builtin.copy:
    src: "{{ dss_license_file }}"
    dest: "{{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ dss_datadir }}/config/license.json"
    mode: '644'
  tags: [dss]

- name: Tune DSS backend memory settings
  become: true
  become_user: "{{ dss_service_user }}"
  community.general.ini_file:
    path: "{{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ dss_datadir }}/install.ini"
    backup: true
    section: javaopts
    option: backend.xmx
    value: "{{ dss_backend_xmx }}"
    mode: 0600
  when: dss_backend_xmx is defined
  notify:
    - Regenerate DSS config
    - Restart DSS
  tags: [dss]

- name: Tune DSS JEK memory settings
  become: true
  become_user: "{{ dss_service_user }}"
  community.general.ini_file:
    path: "{{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ dss_datadir }}/install.ini"
    backup: true
    section: javaopts
    option: jek.xmx
    value: "{{ dss_jek_xmx }}"
    mode: 0600
  when: dss_jek_xmx is defined
  notify:
    - Regenerate DSS config
    - Restart DSS
  tags: [dss]

- name: Tune DSS FEK memory settings
  become: true
  become_user: "{{ dss_service_user }}"
  community.general.ini_file:
    path: "{{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ dss_datadir }}/install.ini"
    backup: true
    section: javaopts
    option: fek.xmx
    value: "{{ dss_fek_xmx }}"
    mode: 0600
  when: dss_fek_xmx is defined
  notify:
    - Regenerate DSS config
    - Restart DSS
  tags: [dss]

- name: Install boot service
  become: true
  ansible.builtin.command: "{{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}/scripts/install/install-boot.sh -n {{ dss_datadir }} {{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ dss_datadir }} dataiku"
  args:
    creates: "/etc/init.d/dataiku.{{ dss_datadir }}"
  tags: [dss]

- name: Start the studios
  become: true
  ansible.builtin.service:
    name: "dataiku.{{ dss_datadir }}"
    state: started
    enabled: true
  tags: [dss, molecule-idempotence-notest]