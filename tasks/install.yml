---
- name: Download DSS
  become: true
  become_user: "{{ dss_service_user }}"
  ansible.builtin.get_url:
    url: "{{ dss_base_repository_url }}/{{ dss_version }}/dataiku-dss-{{ dss_version }}.tar.gz"
    dest: "{{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}.tar.gz"
    mode: '644'
  tags: [setup, dss-setup]

- name: Unarchive DSS
  become: true
  become_user: "{{ dss_service_user }}"
  ansible.builtin.unarchive:
    src: "{{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}.tar.gz"
    dest: "{{ dss_install_dir_location }}"
    creates: "{{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}"
    remote_src: yes
  tags: [setup, dss-setup]

- name: Install DSS dependencies
  become: true
  ansible.builtin.shell:
    cmd: |
      {{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}/scripts/install/install-deps.sh -yes 2>&1 > /tmp/dss-install-deps.log
      touch {{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}/scripts/install/DEPS-INSTALLED
    creates: "{{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}/scripts/install/DEPS-INSTALLED"
  tags: [setup, dss-setup]

- name: Install Dataiku python API
  become: true
  ansible.builtin.pip:
    name: "{{ dataiku_python_api_package }}"
    state: latest
    executable: pip3
    #state: forcereinstall # Useful when release/5.1 gets updated
  tags: [setup, dss-setup, dss-api]

- name: Install DSS
  block:
    - name: Run the Dataiku DSS installer to install DSS for the first time
      become: true
      become_user: "{{ dss_service_user }}"
      ansible.builtin.command: "{{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}/installer.sh -d {{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ datadir }} -p {{ port }} -t {{ type }}"
      args:
        creates: "{{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ datadir }}/dss-version.json"
      register: dss_install

    - name: Notify spark install/update handler
      assert: { that: true, quiet: true }
      changed_when: dss_install.changed and configure_spark|bool
      notify:
        - Download Hadoop package
        - Install or upgrade standalone Hadoop support
        - Download Spark package
        - Install or upgrade standalone Spark support
  
  tags: [dss]

- name: Read dss-version.json file
  shell: cat {{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ datadir }}/dss-version.json
  register: dss_version_jsonfile
  changed_when: false
  tags: [dss]

- name: Set current dss version fact
  set_fact:
    current_dss_version: "{{ dss_version_jsonfile.stdout |  from_json | json_query('product_version') }}"
  changed_when: false
  tags: [dss]

- name: Compare currently installed DSS version with target DSS version and upgrade DSS if needed
  block:
    - name: "Upgrade message" 
      debug:
        msg: "DSS UPGRADE REQUIRED"
    
    - name: Stop the studios
      become: true
      ansible.builtin.service:
        name: "dataiku.{{ datadir }}"
        state: stopped

    - name: Run the Dataiku DSS installer to upgrade the DSS instance
      become: true
      become_user: "{{ dss_service_user }}"
      ansible.builtin.command: "{{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}/installer.sh -u -y -d {{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ datadir }}"

    - name: Notify spark install/update handler
      assert: { that: true, quiet: true }
      changed_when: configure_spark|bool
      notify:
        - Download Hadoop package
        - Install or upgrade standalone Hadoop support
        - Download Spark package
        - Install or upgrade standalone Spark support
  when: current_dss_version is version(dss_version,  operator='lt', strict=True)
  tags: [dss]

- name: Flush handlers
  meta: flush_handlers

- name: Copy license file
  become: true
  become_user: "{{ dss_service_user }}"
  ansible.builtin.copy:
    src: "{{ dss_license_file }}"
    dest: "{{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ datadir }}/config/license.json"
    mode: '644'
  tags: [dss]

- name: Install boot service
  become: true
  ansible.builtin.command: "{{ dss_install_dir_location }}/dataiku-dss-{{ dss_version }}/scripts/install/install-boot.sh -n {{ datadir }} {{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ datadir }} dataiku"
  args:
    creates: "/etc/init.d/dataiku.{{ datadir }}"
  tags: [dss]

- name: Start the studios
  become: true
  ansible.builtin.service:
    name: "dataiku.{{ datadir }}"
    state: started
    enabled: true
  tags: [dss]