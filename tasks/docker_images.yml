---

#  Docker base images naming :
#     if image_type == "container-exec":
#         return "dku-exec-base-%s:dss-%s" % (install_id, DSS_VERSION)
#     elif image_type == "spark":
#         return "dku-spark-base-%s:dss-%s" % (install_id, DSS_VERSION)
#     elif image_type == "api-deployer":
#         return "dku-apideployer-apinode-base:dss-%s" % DSS_VERSION


# DOCKER - BUILD CONTAINER-EXEC BASE IMAGE WHEN KUBERNETES IS ENABLED
- name: DOCKER - BUILD CONTAINER-EXEC BASE IMAGE
  ansible.builtin.import_tasks: docker_images/container_exec.yml
  when: (configure_k8s) 
    and (dataikudss_docker_build_base_image_mode is defined)

# DOCKER - BUILD SPARK BASE IMAGE WHEN SPARK & KUBERNETES ARE ENABLED
- name: DOCKER - BUILD SPARK BASE IMAGE
  ansible.builtin.import_tasks: docker_images/spark.yml
  when: (configure_k8s)
    and (configure_spark) 
    and (dataikudss_docker_build_base_image_mode is defined)

# DOWNLOAD DOCKER IMAGES EMBEDDED IN A TAR.GZ ARCHIVE FROM DATAIKU CDN AND LOAD THEM
- name: Test if DSS base images provided by Dataiku are registered locally
  become: true
  community.docker.docker_image_info:
    name:
      - "dataiku-dss-container-exec-base:dss-{{ dss_version }}-r-py3.6"
      - "dataiku-dss-spark-exec-base:dss-{{ dss_version }}-r-py3.6"
      - "dataiku-dss-apideployer-base:dss-{{ dss_version }}-r-py3.6"
  register: result_test_docker_images
  when: (dataikudss_docker_build_base_image_mode is defined) and (dataikudss_docker_build_base_image_mode == "download") 
  tags: [docker-images]

- name: Create temporary download directory if it does not exist
  become: true
  become_user: "{{ dss_service_user }}"
  ansible.builtin.file:
    path: "{{ download_dss_docker_images_url_tmp_directory }}"
    state: directory
    mode: '0755'
  when: (dataikudss_docker_build_base_image_mode is defined) and (dataikudss_docker_build_base_image_mode == "download") and (download_dss_docker_images_url_tmp_directory is defined)
  tags: [docker-images]

- name: Download base images archive provided by Dataiku
  become: true
  become_user: "{{ dss_service_user }}"
  ansible.builtin.get_url:
    url: "{{ download_dss_docker_images_url }}"
    tmp_dest: "{{ download_dss_docker_images_url_tmp_directory | default(omit) }}"
    dest: "{{ dss_install_dir_location }}/dataiku-dss-ALL-base_dss-{{ dss_version }}-r-py3.6.tar.gz"
    mode: '644'
  register: downloaded_images_archive
  when: (dataikudss_docker_build_base_image_mode is defined) and (dataikudss_docker_build_base_image_mode == "download") and ((result_test_docker_images.images | length) < 3)
  tags: [docker-images]

- name: Load all base images from archive
  become: true
  community.docker.docker_image_load:
    path: "{{ dss_install_dir_location }}/dataiku-dss-ALL-base_dss-{{ dss_version }}-r-py3.6.tar.gz"
    timeout: 240
  register: loaded_images
  when: downloaded_images_archive.changed
  tags: [docker-images, molecule-notest]
