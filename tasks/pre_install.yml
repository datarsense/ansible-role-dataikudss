---
- name: Set per-host facts
  ansible.builtin.set_fact:
    dss_node_hostname: "{{ ansible_fqdn if dss_node_poll_fqdn else ansible_host }}"
  tags: [setup, dss-setup, dss]

- name: Debian-like distributions specific preinstall tasks
  ansible.builtin.import_tasks: pre_install/debian.yml
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Centos specific preinstall tasks
  ansible.builtin.import_tasks: pre_install/centos.yml
  when: ansible_distribution == 'CentOS'

- name: Disable SELinux
  become: true
  ansible.posix.selinux:
    state: disabled
  register: selinuxdisabled
  failed_when: selinuxdisabled.msg | default('ok', True) is not search('(^ok$|libselinux-python|(SELinux state changed))')
  tags: [setup]

- name: Reboot server after disabling SELinux when required
  become: true
  when: selinuxdisabled is changed
  ansible.builtin.shell: 
    cmd: "sleep 5 && reboot"
    async: 1
    poll: 0
  tags: [setup]

- name: Increase system limits as required by DSS
  become: true
  community.general.pam_limits:
    domain: "{{ dss_service_user }}"
    limit_item: "{{ item }}"
    limit_type: "-"
    value: 65536
  loop:
    - nofile
    - nproc
  tags: [setup]

- name: Create service user
  become: true
  ansible.builtin.user:
    name: "{{ dss_service_user }}"
    home: "{{ dss_service_user_home_basedir }}/{{ dss_service_user }}"
    shell: "{{ dss_service_user_shell }}"
    state: present
  tags: [setup, dss-setup]

- name: Create UIF groups
  become: true
  when: configure_uif
  ansible.builtin.group:
    name: "{{ item.value.group }}"
    state: present
  loop: "{{ uif_users | dict2items }}"
  tags: [setup, dss-setup]

- name: Create UIF users
  become: true
  when: configure_uif
  ansible.builtin.user:
    name: "{{ item.key }}"
    group: "{{ item.value.group }}"
    home: "{{ dss_service_user_home_basedir }}/{{ item.key }}"
    shell: "{{ dss_service_user_shell }}"
    state: present
  loop: "{{ uif_users | dict2items }}"
  tags: [setup, dss-setup]

- name: Allow admin group executing playbook to run any commands as DSS service user
  become: true
  community.general.sudoers:
    name: enable-sudoer-admin-runas-dss-account
    state: present
    user: "{{ ansible_user_id }}"
    runas: "{{ dss_service_user }}"
    commands: ALL

- name: Create dss install directory
  become: true
  ansible.builtin.file:
    path: "{{ dss_install_dir_location }}"
    state: directory
    owner: "{{ dss_service_user }}"
    mode: "u=rwx,g=rx,o=rx"
  tags: [setup, dss-setup]

- name: Create dss data directory
  become: true
  ansible.builtin.file:
    path: "{{ dss_service_user_home_basedir }}/{{ dss_service_user }}/{{ dss_datadir }}"
    state: directory
    owner: "{{ dss_service_user }}"
    mode: "u=rwx,g=x,o=x"
  tags: [setup, dss-setup]
